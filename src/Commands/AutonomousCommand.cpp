// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"

AutonomousCommand::AutonomousCommand() {
	Requires(Robot::chassis);
	Requires(Robot::winch);

	m_toteFinished = false;

	Robot::chassis->m_gyro->SetPIDSourceParameter(Gyro::kAngle);


	m_rotateOput = new RotatePIDOutput(Robot::chassis->drive);
	m_straightOput = new MoveStraightPIDOutput(Robot::chassis->drive);
	m_turnPID = new PIDController(AUTO_P_TURN,AUTO_I_TURN,AUTO_D_TURN,Robot::chassis->m_gyro, m_rotateOput);
	m_straightPID = new PIDController(AUTO_P_DISTANCE, AUTO_I_DISTANCE, AUTO_D_DISTANCE, Robot::chassis->m_backRightEncoder, m_straightOput);


	// Use requires() here to declare subsystem dependencies
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	m_toteFinished = false;

	Robot::chassis->m_backRightEncoder->SetPIDSourceParameter(Encoder::kDistance);
	Robot::chassis->m_backRightEncoder->SetDistancePerPulse(1.0);
	Robot::chassis->m_backRightEncoder->Reset();

	Robot::chassis->m_gyro->Reset();

	Robot::winch->MoveUp(.8);

	m_turnPID->SetPID(AUTO_P_TURN,AUTO_I_TURN,AUTO_D_TURN);
 	m_turnPID->Enable();
 	m_turnPID->SetPercentTolerance(0.8);
	m_turnPID->SetOutputRange(-0.75,0.75);
	m_turnPID->SetInputRange(-1000,1000);
	m_turnPID->SetSetpoint(-40);
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	std::cout << "On Target!!! " << m_turnPID->Get() << std::endl;

	if(m_turnPID->OnTarget() && m_turnPID->IsEnabled() && !m_toteFinished) {
		std::cout << "On Target!!!" << std::endl;
		m_turnPID->Disable();


		Robot::chassis->m_backRightEncoder->Reset();
		m_straightPID->SetOutputRange(-0.75,0.75);
		m_straightPID->SetPercentTolerance(0.5);
		m_straightPID->SetInputRange(-10000,10000);
		m_straightPID->Enable();
		m_straightPID->SetSetpoint(-18.5*AUTO_PULSES_PER_INCH);
	}

	if(m_straightPID->OnTarget() && m_straightPID->IsEnabled()) {
		m_straightPID->Disable();

	 	m_turnPID->SetPID(0.009, m_turnPID->GetI(), m_turnPID->GetD());
		Robot::chassis->m_gyro->Reset();

	 	m_turnPID->Enable();
	 	m_turnPID->SetPercentTolerance(0.8);
		m_turnPID->SetOutputRange(-1,1);
		m_turnPID->SetInputRange(-1000,1000);
		m_turnPID->SetSetpoint(40);

		m_toteFinished = true;



	}
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return 	false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	m_turnPID->Disable();
	m_straightPID->Disable();
	Robot::chassis->m_backRightEncoder->SetPIDSourceParameter(Encoder::kRate);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	End();
}
