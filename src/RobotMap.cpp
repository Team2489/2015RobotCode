// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisFrontLeftMotor = NULL;
SpeedController* RobotMap::chassisFrontRightMotor = NULL;
SpeedController* RobotMap::chassisBackLeftMotor = NULL;
SpeedController* RobotMap::chassisBackRightMotor = NULL;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

Encoder* RobotMap::chassisFrontLeftEncoder = NULL;
Encoder* RobotMap::chassisFrontRightEncoder = NULL;
Encoder* RobotMap::chassisBackLeftEncoder = NULL;
Encoder* RobotMap::chassisBackRightEncoder = NULL;

DigitalInput* RobotMap::chassisLeftProximitySensor = NULL;

PIDController* RobotMap::chassisFrontLeftMotorPID = NULL;
PIDController* RobotMap::chassisFrontRightMotorPID = NULL;
PIDController* RobotMap::chassisBackLeftMotorPID = NULL;
PIDController* RobotMap::chassisBackRightMotorPID = NULL;

Talon* RobotMap::winchtalon = NULL;

Gyro* RobotMap::chassisGyro = NULL;

Encoder* RobotMap::winchEncoder = NULL;
PIDController* RobotMap::winchEncoderPID = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	
	chassisFrontLeftMotor = new Talon(CHASSIS_FRONT_LEFT_MOTOR_PWM);
	lw->AddActuator("Chassis", "leftMotor", (Talon*) chassisFrontLeftMotor);

	chassisFrontRightMotor = new Talon(CHASSIS_FRONT_RIGHT_MOTOR_PWM);
	lw->AddActuator("Chassis", "rightMotor", (Talon*) chassisFrontRightMotor);

	chassisBackLeftMotor = new Talon(CHASSIS_BACK_LEFT_MOTOR_PWM);
	lw->AddActuator("Chassis", "leftMotor", (Talon*) chassisBackLeftMotor);

	chassisBackRightMotor = new Talon(CHASSIS_BACK_RIGHT_MOTOR_PWM);
	lw->AddActuator("Chassis", "rightMotor", (Talon*) chassisBackRightMotor);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	chassisFrontLeftEncoder = new Encoder(CHASSIS_ENCODER_FRONT_LEFT_PORT_1, CHASSIS_ENCODER_FRONT_LEFT_PORT_2, false, Encoder::k2X);
	chassisFrontRightEncoder = new Encoder(CHASSIS_ENCODER_FRONT_RIGHT_PORT_1, CHASSIS_ENCODER_FRONT_RIGHT_PORT_2, false, Encoder::k2X);
	chassisBackLeftEncoder = new Encoder(CHASSIS_ENCODER_BACK_LEFT_PORT_1, CHASSIS_ENCODER_BACK_LEFT_PORT_2, false, Encoder::k2X);
	chassisBackRightEncoder = new Encoder(CHASSIS_ENCODER_BACK_RIGHT_PORT_1, CHASSIS_ENCODER_BACK_RIGHT_PORT_2, false, Encoder::k2X);

	chassisFrontLeftEncoder->SetDistancePerPulse(1);
	chassisFrontRightEncoder->SetDistancePerPulse(1);
	chassisBackLeftEncoder->SetDistancePerPulse(1);
	chassisBackRightEncoder->SetDistancePerPulse(1);

	chassisFrontLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisFrontRightEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisBackLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisBackRightEncoder->SetPIDSourceParameter(Encoder::kRate);

	chassisLeftProximitySensor = new DigitalInput(CHASSIS_PROXIMITY_SENSOR_LEFT);


	chassisFrontLeftMotorPID = new PIDController(CHASSIS_P_FRONT_LEFT, CHASSIS_I_FRONT_LEFT, CHASSIS_D_FRONT_LEFT
			,CHASSIS_F_FRONT_LEFT,chassisFrontLeftEncoder, chassisFrontLeftMotor);
	chassisFrontRightMotorPID = new PIDController(CHASSIS_P_FRONT_RIGHT, CHASSIS_I_FRONT_RIGHT, CHASSIS_D_FRONT_RIGHT
			,CHASSIS_F_FRONT_RIGHT,chassisFrontRightEncoder, chassisFrontRightMotor);
	chassisBackRightMotorPID = new PIDController(CHASSIS_P_BACK_RIGHT, CHASSIS_I_BACK_RIGHT, CHASSIS_D_BACK_RIGHT
			,CHASSIS_F_BACK_RIGHT,chassisBackRightEncoder, chassisBackRightMotor);
	chassisBackLeftMotorPID = new PIDController(CHASSIS_P_BACK_LEFT, CHASSIS_I_BACK_LEFT, CHASSIS_D_BACK_LEFT
				,CHASSIS_F_BACK_LEFT,chassisBackLeftEncoder, chassisBackLeftMotor);
	winchEncoder = new Encoder(WINCH_ENCODER_PORT_1, WINCH_ENCODER_PORT_2, false, Encoder::k2X);
	winchEncoder->SetPIDSourceParameter(Encoder::kDistance);

	winchEncoderPID = new PIDController(WINCH_P, WINCH_I, WINCH_D, winchEncoder, winchtalon);
	winchEncoderPID->SetPercentTolerance(0.8);
	winchEncoderPID->SetOutputRange(-1,1);
	winchEncoderPID->SetInputRange(-1000,10000);

	winchtalon = new Talon(WINCH_TALON_MOTOR_PWM);
	chassisGyro = new Gyro(CHASSIS_GYRO_ANALOG_INPUT);
}
